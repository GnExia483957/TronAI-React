{"ast":null,"code":"var _jsxFileName = \"/Users/ngaigarricktrondao/Desktop/Tron-Net/TronAI-React/src/components/Agent/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\nimport Markdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ThinkingAnimation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader\",\n    children: Array.from({\n      length: 5\n    }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n};\n_c = ThinkingAnimation;\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: 'Dear Tron user, how can I help?'\n  }]);\n  const [userInput, setUserInput] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const chatContainerRef = useRef(null);\n  const enterKeyDisabledRef = useRef(false);\n  useEffect(() => {\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }, [messages]);\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSendMessage = () => {\n    const trimmedMessage = userInput.trim();\n    if (trimmedMessage === '') {\n      appendMessage('bot', 'Please enter a message so I can properly assist you.');\n      return;\n    }\n    appendMessage('user', trimmedMessage);\n    setUserInput('');\n    setIsSending(true);\n\n    // Disable send button for 4 seconds\n    enterKeyDisabledRef.current = true;\n    setTimeout(() => {\n      enterKeyDisabledRef.current = false;\n    }, 4000);\n    fetchResponse(trimmedMessage);\n  };\n  const fetchResponse = query => {\n    showThinkingAnimation();\n    fetch('https://tronai.io/v1/g_chat', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      }),\n      credentials: 'include'\n    }).then(response => {\n      if (!response.ok) throw new Error('Network response was not ok');\n      return response.json();\n    }).then(data => {\n      hideThinkingAnimation();\n      typeOutMessage(data.data.answer, 'bot');\n      console.log(data);\n    }).catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n      hideThinkingAnimation();\n      typeOutMessage('Sorry, something went wrong. Please try again.', 'bot');\n    }).finally(() => {\n      setIsSending(false);\n    });\n  };\n  const typeOutMessage = (text, sender) => {\n    const messageBox = {\n      sender,\n      text: /*#__PURE__*/_jsxDEV(Markdown, {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 44\n      }, this)\n    }; // Render Markdown\n    setMessages(prevMessages => [...prevMessages, messageBox]);\n    let index = 0;\n    const typingInterval = setInterval(() => {\n      if (index < text.length) {\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          updatedMessages[updatedMessages.length - 1].text = /*#__PURE__*/_jsxDEV(Markdown, {\n            children: text.substring(0, index + 1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this); // Update text progressively\n          return updatedMessages;\n        });\n        index++;\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Keep scrolling to the bottom\n      } else {\n        clearInterval(typingInterval); // Stop typing effect\n        const timestamp = getCurrentTime(); // Set timestamp after typing\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          updatedMessages[updatedMessages.length - 1].timestamp = timestamp; // Add timestamp\n          return updatedMessages;\n        });\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Final scroll to the bottom\n      }\n    }, 15); // Adjust typing speed here\n  };\n  const appendMessage = (sender, text) => {\n    setMessages(prevMessages => [...prevMessages, {\n      sender,\n      text\n    }]);\n  };\n  const showThinkingAnimation = () => {\n    const thinkingMessage = {\n      sender: 'bot',\n      text: /*#__PURE__*/_jsxDEV(ThinkingAnimation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 56\n      }, this)\n    };\n    setMessages(prevMessages => [...prevMessages, thinkingMessage]);\n  };\n  const hideThinkingAnimation = () => {\n    setMessages(prevMessages => prevMessages.filter(msg => !(msg.text.type && msg.text.type === ThinkingAnimation)));\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !enterKeyDisabledRef.current) {\n      e.preventDefault(); // Prevent default behavior\n      handleSendMessage();\n    }\n  };\n\n  // const handleClose = () => {\n  //     // Logic to handle closing the chat (e.g., hiding the component)\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      id: \"chatContainer\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: [msg.sender === 'user' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-box\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: \"Assistant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-box\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timestamp\",\n          children: msg.timestamp || getCurrentTime()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"userInput\",\n        value: userInput,\n        placeholder: \"Currently Only Support Developers\",\n        onChange: handleInputChange,\n        onKeyDown: handleKeyPress // Use onKeyDown\n        ,\n        disabled: isSending\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        id: \"sendButton\",\n        onClick: handleSendMessage,\n        disabled: isSending,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"+hqABJVi4qSsS2cECFGVmdSJVEI=\");\n_c2 = Chatbot;\nconst getCurrentTime = () => {\n  const now = new Date();\n  return now.toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport default Chatbot;\nvar _c, _c2;\n$RefreshReg$(_c, \"ThinkingAnimation\");\n$RefreshReg$(_c2, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Markdown","jsxDEV","_jsxDEV","Fragment","_Fragment","ThinkingAnimation","className","children","Array","from","length","_","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","Chatbot","_s","messages","setMessages","sender","text","userInput","setUserInput","isSending","setIsSending","chatContainerRef","enterKeyDisabledRef","current","scrollTop","scrollHeight","handleInputChange","e","target","value","handleSendMessage","trimmedMessage","trim","appendMessage","setTimeout","fetchResponse","query","showThinkingAnimation","fetch","method","headers","body","JSON","stringify","credentials","then","response","ok","Error","json","data","hideThinkingAnimation","typeOutMessage","answer","console","log","catch","error","finally","messageBox","prevMessages","typingInterval","setInterval","updatedMessages","substring","clearInterval","timestamp","getCurrentTime","thinkingMessage","filter","msg","type","handleKeyPress","key","preventDefault","ref","id","map","placeholder","onChange","onKeyDown","disabled","onClick","_c2","now","Date","toLocaleTimeString","hour","minute","$RefreshReg$"],"sources":["/Users/ngaigarricktrondao/Desktop/Tron-Net/TronAI-React/src/components/Agent/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\nimport Markdown from 'react-markdown'\n\nconst ThinkingAnimation = () => {\n    return (\n        <div className=\"loader\">\n            {Array.from({ length: 5 }, (_, index) => (\n                <div key={index} className=\"dot\"></div>\n            ))}\n        </div>\n    );\n};\n\n\nconst Chatbot = () => {\n\n    const [messages, setMessages] = useState([{ sender: 'bot', text: 'Dear Tron user, how can I help?' }]);\n    const [userInput, setUserInput] = useState('');\n    const [isSending, setIsSending] = useState(false);\n    const chatContainerRef = useRef(null);\n    const enterKeyDisabledRef = useRef(false);\n\n    useEffect(() => {\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }, [messages]);\n\n    const handleInputChange = (e) => {\n        setUserInput(e.target.value);\n    };\n\n    const handleSendMessage = () => {\n        const trimmedMessage = userInput.trim();\n        if (trimmedMessage === '') {\n            appendMessage('bot', 'Please enter a message so I can properly assist you.');\n            return;\n        }\n\n        appendMessage('user', trimmedMessage);\n        setUserInput('');\n        setIsSending(true);\n\n        // Disable send button for 4 seconds\n        enterKeyDisabledRef.current = true;\n        setTimeout(() => {\n            enterKeyDisabledRef.current = false;\n        }, 4000);\n\n        fetchResponse(trimmedMessage);\n    };\n\n    const fetchResponse = (query) => {\n        showThinkingAnimation();\n\n        fetch('https://tronai.io/v1/g_chat', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ query }),\n            credentials: 'include',\n        })\n        .then(response => {\n            if (!response.ok) throw new Error('Network response was not ok');\n            return response.json();\n        })\n        .then(data => {\n            hideThinkingAnimation();\n            typeOutMessage(data.data.answer, 'bot');\n            console.log(data);\n        })\n        .catch(error => {\n            console.error('There was a problem with the fetch operation:', error);\n            hideThinkingAnimation();\n            typeOutMessage('Sorry, something went wrong. Please try again.', 'bot');\n        })\n        .finally(() => {\n            setIsSending(false);\n        });\n    };\n\n    const typeOutMessage = (text, sender) => {\n        const messageBox = { sender, text: <Markdown>{text}</Markdown> }; // Render Markdown\n        setMessages(prevMessages => [...prevMessages, messageBox]);\n\n        let index = 0;\n        const typingInterval = setInterval(() => {\n            if (index < text.length) {\n                setMessages(prevMessages => {\n                    const updatedMessages = [...prevMessages];\n                    updatedMessages[updatedMessages.length - 1].text = (\n                        <Markdown>{text.substring(0, index + 1)}</Markdown>\n                    ); // Update text progressively\n                    return updatedMessages;\n                });\n                index++;\n                chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Keep scrolling to the bottom\n            } else {\n                clearInterval(typingInterval); // Stop typing effect\n                const timestamp = getCurrentTime(); // Set timestamp after typing\n                setMessages(prevMessages => {\n                    const updatedMessages = [...prevMessages];\n                    updatedMessages[updatedMessages.length - 1].timestamp = timestamp; // Add timestamp\n                    return updatedMessages;\n                });\n                chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Final scroll to the bottom\n            }\n        }, 15); // Adjust typing speed here\n    };\n\n    const appendMessage = (sender, text) => {\n        setMessages(prevMessages => [...prevMessages, { sender, text }]);\n    };\n\n    const showThinkingAnimation = () => {\n        const thinkingMessage = { sender: 'bot', text: <ThinkingAnimation /> };\n        setMessages(prevMessages => [...prevMessages, thinkingMessage]);\n    };\n\n    const hideThinkingAnimation = () => {\n        setMessages(prevMessages => prevMessages.filter(msg => !(msg.text.type && msg.text.type === ThinkingAnimation)));\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !enterKeyDisabledRef.current) {\n            e.preventDefault(); // Prevent default behavior\n            handleSendMessage();\n        }\n    };\n\n    // const handleClose = () => {\n    //     // Logic to handle closing the chat (e.g., hiding the component)\n    // };\n\n    return (\n        <div className=\"chatbot-container\">\n            <div className=\"chat-container\" ref={chatContainerRef} id=\"chatContainer\">\n                {messages.map((msg, index) => (\n                    <div key={index} className={`message ${msg.sender}`}>\n                        {msg.sender === 'user' ? (\n                            <div className=\"message-box\">{msg.text}</div>\n                        ) : (\n                            <>\n                                <div className=\"title\">Assistant</div>\n                                <div className=\"message-box\">{msg.text}</div>\n                            </>\n                        )}\n                        <div className=\"timestamp\">{msg.timestamp || getCurrentTime()}</div>\n                    </div>\n                ))}\n            </div>\n\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    id=\"userInput\"\n                    value={userInput}\n                    placeholder=\"Currently Only Support Developers\"\n                    onChange={handleInputChange}\n                    onKeyDown={handleKeyPress} // Use onKeyDown\n                    disabled={isSending}\n                />\n                <button\n                    className=\"send-button\"\n                    id=\"sendButton\"\n                    onClick={handleSendMessage}\n                    disabled={isSending}\n                >\n                    Send\n                </button>\n            </div>       \n        </div>\n    );\n};\n\nconst getCurrentTime = () => {\n    const now = new Date();\n    return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n};\n\nexport default Chatbot;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,eAAe;AACtB,OAAOC,QAAQ,MAAM,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC5B,oBACIH,OAAA;IAAKI,SAAS,EAAC,QAAQ;IAAAC,QAAA,EAClBC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,kBAChCV,OAAA;MAAiBI,SAAS,EAAC;IAAK,GAAtBM,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuB,CACzC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACC,EAAA,GARIZ,iBAAiB;AAWvB,MAAMa,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAElB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,CAAC;IAAEyB,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAkC,CAAC,CAAC,CAAC;EACtG,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC6B,SAAS,EAAEC,YAAY,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM+B,gBAAgB,GAAG7B,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM8B,mBAAmB,GAAG9B,MAAM,CAAC,KAAK,CAAC;EAEzCD,SAAS,CAAC,MAAM;IACZ8B,gBAAgB,CAACE,OAAO,CAACC,SAAS,GAAGH,gBAAgB,CAACE,OAAO,CAACE,YAAY;EAC9E,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEd,MAAMa,iBAAiB,GAAIC,CAAC,IAAK;IAC7BT,YAAY,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMC,cAAc,GAAGd,SAAS,CAACe,IAAI,CAAC,CAAC;IACvC,IAAID,cAAc,KAAK,EAAE,EAAE;MACvBE,aAAa,CAAC,KAAK,EAAE,sDAAsD,CAAC;MAC5E;IACJ;IAEAA,aAAa,CAAC,MAAM,EAAEF,cAAc,CAAC;IACrCb,YAAY,CAAC,EAAE,CAAC;IAChBE,YAAY,CAAC,IAAI,CAAC;;IAElB;IACAE,mBAAmB,CAACC,OAAO,GAAG,IAAI;IAClCW,UAAU,CAAC,MAAM;MACbZ,mBAAmB,CAACC,OAAO,GAAG,KAAK;IACvC,CAAC,EAAE,IAAI,CAAC;IAERY,aAAa,CAACJ,cAAc,CAAC;EACjC,CAAC;EAED,MAAMI,aAAa,GAAIC,KAAK,IAAK;IAC7BC,qBAAqB,CAAC,CAAC;IAEvBC,KAAK,CAAC,6BAA6B,EAAE;MACjCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAM,CAAC,CAAC;MAC/BQ,WAAW,EAAE;IACjB,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChE,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACVC,qBAAqB,CAAC,CAAC;MACvBC,cAAc,CAACF,IAAI,CAACA,IAAI,CAACG,MAAM,EAAE,KAAK,CAAC;MACvCC,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;IACrB,CAAC,CAAC,CACDM,KAAK,CAACC,KAAK,IAAI;MACZH,OAAO,CAACG,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACrEN,qBAAqB,CAAC,CAAC;MACvBC,cAAc,CAAC,gDAAgD,EAAE,KAAK,CAAC;IAC3E,CAAC,CAAC,CACDM,OAAO,CAAC,MAAM;MACXtC,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;EACN,CAAC;EAED,MAAMgC,cAAc,GAAGA,CAACpC,IAAI,EAAED,MAAM,KAAK;IACrC,MAAM4C,UAAU,GAAG;MAAE5C,MAAM;MAAEC,IAAI,eAAErB,OAAA,CAACF,QAAQ;QAAAO,QAAA,EAAEgB;MAAI;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW;IAAE,CAAC,CAAC,CAAC;IAClEK,WAAW,CAAC8C,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC;IAE1D,IAAItD,KAAK,GAAG,CAAC;IACb,MAAMwD,cAAc,GAAGC,WAAW,CAAC,MAAM;MACrC,IAAIzD,KAAK,GAAGW,IAAI,CAACb,MAAM,EAAE;QACrBW,WAAW,CAAC8C,YAAY,IAAI;UACxB,MAAMG,eAAe,GAAG,CAAC,GAAGH,YAAY,CAAC;UACzCG,eAAe,CAACA,eAAe,CAAC5D,MAAM,GAAG,CAAC,CAAC,CAACa,IAAI,gBAC5CrB,OAAA,CAACF,QAAQ;YAAAO,QAAA,EAAEgB,IAAI,CAACgD,SAAS,CAAC,CAAC,EAAE3D,KAAK,GAAG,CAAC;UAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CACrD,CAAC,CAAC;UACH,OAAOsD,eAAe;QAC1B,CAAC,CAAC;QACF1D,KAAK,EAAE;QACPgB,gBAAgB,CAACE,OAAO,CAACC,SAAS,GAAGH,gBAAgB,CAACE,OAAO,CAACE,YAAY,CAAC,CAAC;MAChF,CAAC,MAAM;QACHwC,aAAa,CAACJ,cAAc,CAAC,CAAC,CAAC;QAC/B,MAAMK,SAAS,GAAGC,cAAc,CAAC,CAAC,CAAC,CAAC;QACpCrD,WAAW,CAAC8C,YAAY,IAAI;UACxB,MAAMG,eAAe,GAAG,CAAC,GAAGH,YAAY,CAAC;UACzCG,eAAe,CAACA,eAAe,CAAC5D,MAAM,GAAG,CAAC,CAAC,CAAC+D,SAAS,GAAGA,SAAS,CAAC,CAAC;UACnE,OAAOH,eAAe;QAC1B,CAAC,CAAC;QACF1C,gBAAgB,CAACE,OAAO,CAACC,SAAS,GAAGH,gBAAgB,CAACE,OAAO,CAACE,YAAY,CAAC,CAAC;MAChF;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACZ,CAAC;EAED,MAAMQ,aAAa,GAAGA,CAAClB,MAAM,EAAEC,IAAI,KAAK;IACpCF,WAAW,CAAC8C,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;MAAE7C,MAAM;MAAEC;IAAK,CAAC,CAAC,CAAC;EACpE,CAAC;EAED,MAAMqB,qBAAqB,GAAGA,CAAA,KAAM;IAChC,MAAM+B,eAAe,GAAG;MAAErD,MAAM,EAAE,KAAK;MAAEC,IAAI,eAAErB,OAAA,CAACG,iBAAiB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE,CAAC;IACtEK,WAAW,CAAC8C,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEQ,eAAe,CAAC,CAAC;EACnE,CAAC;EAED,MAAMjB,qBAAqB,GAAGA,CAAA,KAAM;IAChCrC,WAAW,CAAC8C,YAAY,IAAIA,YAAY,CAACS,MAAM,CAACC,GAAG,IAAI,EAAEA,GAAG,CAACtD,IAAI,CAACuD,IAAI,IAAID,GAAG,CAACtD,IAAI,CAACuD,IAAI,KAAKzE,iBAAiB,CAAC,CAAC,CAAC;EACpH,CAAC;EAED,MAAM0E,cAAc,GAAI7C,CAAC,IAAK;IAC1B,IAAIA,CAAC,CAAC8C,GAAG,KAAK,OAAO,IAAI,CAACnD,mBAAmB,CAACC,OAAO,EAAE;MACnDI,CAAC,CAAC+C,cAAc,CAAC,CAAC,CAAC,CAAC;MACpB5C,iBAAiB,CAAC,CAAC;IACvB;EACJ,CAAC;;EAED;EACA;EACA;;EAEA,oBACInC,OAAA;IAAKI,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAC9BL,OAAA;MAAKI,SAAS,EAAC,gBAAgB;MAAC4E,GAAG,EAAEtD,gBAAiB;MAACuD,EAAE,EAAC,eAAe;MAAA5E,QAAA,EACpEa,QAAQ,CAACgE,GAAG,CAAC,CAACP,GAAG,EAAEjE,KAAK,kBACrBV,OAAA;QAAiBI,SAAS,EAAE,WAAWuE,GAAG,CAACvD,MAAM,EAAG;QAAAf,QAAA,GAC/CsE,GAAG,CAACvD,MAAM,KAAK,MAAM,gBAClBpB,OAAA;UAAKI,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAEsE,GAAG,CAACtD;QAAI;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,gBAE7Cd,OAAA,CAAAE,SAAA;UAAAG,QAAA,gBACIL,OAAA;YAAKI,SAAS,EAAC,OAAO;YAAAC,QAAA,EAAC;UAAS;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACtCd,OAAA;YAAKI,SAAS,EAAC,aAAa;YAAAC,QAAA,EAAEsE,GAAG,CAACtD;UAAI;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA,eAC/C,CACL,eACDd,OAAA;UAAKI,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAEsE,GAAG,CAACJ,SAAS,IAAIC,cAAc,CAAC;QAAC;UAAA7D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAT9DJ,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENd,OAAA;MAAKI,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5BL,OAAA;QACI4E,IAAI,EAAC,MAAM;QACXK,EAAE,EAAC,WAAW;QACd/C,KAAK,EAAEZ,SAAU;QACjB6D,WAAW,EAAC,mCAAmC;QAC/CC,QAAQ,EAAErD,iBAAkB;QAC5BsD,SAAS,EAAER,cAAe,CAAC;QAAA;QAC3BS,QAAQ,EAAE9D;MAAU;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC,eACFd,OAAA;QACII,SAAS,EAAC,aAAa;QACvB6E,EAAE,EAAC,YAAY;QACfM,OAAO,EAAEpD,iBAAkB;QAC3BmD,QAAQ,EAAE9D,SAAU;QAAAnB,QAAA,EACvB;MAED;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACG,EAAA,CA/JID,OAAO;AAAAwE,GAAA,GAAPxE,OAAO;AAiKb,MAAMwD,cAAc,GAAGA,CAAA,KAAM;EACzB,MAAMiB,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,OAAOD,GAAG,CAACE,kBAAkB,CAAC,EAAE,EAAE;IAAEC,IAAI,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAU,CAAC,CAAC;AAC7E,CAAC;AAED,eAAe7E,OAAO;AAAC,IAAAD,EAAA,EAAAyE,GAAA;AAAAM,YAAA,CAAA/E,EAAA;AAAA+E,YAAA,CAAAN,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}