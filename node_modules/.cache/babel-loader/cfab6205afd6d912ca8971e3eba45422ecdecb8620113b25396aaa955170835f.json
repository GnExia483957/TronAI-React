{"ast":null,"code":"var _jsxFileName = \"/Users/ngaigarricktrondao/Desktop/Tron-Net/TronAI-React/src/components/Agent/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ThinkingAnimation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader\",\n    children: Array.from({\n      length: 5\n    }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n_c = ThinkingAnimation;\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: 'Dear Tron user, how can I help?'\n  }]);\n  const [userInput, setUserInput] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n  const [isSliding, setIsSliding] = useState(false);\n  const chatContainerRef = useRef(null);\n  const enterKeyDisabledRef = useRef(false);\n  useEffect(() => {\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }, [messages]);\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSendMessage = () => {\n    const trimmedMessage = userInput.trim();\n    if (trimmedMessage === '') {\n      appendMessage('bot', 'Please enter a message so I can properly assist you.');\n      return;\n    }\n    appendMessage('user', trimmedMessage);\n    setUserInput('');\n    setIsSending(true);\n    enterKeyDisabledRef.current = true;\n    setTimeout(() => {\n      enterKeyDisabledRef.current = false;\n    }, 4000);\n    fetchResponse(trimmedMessage);\n  };\n  const fetchResponse = query => {\n    showThinkingAnimation();\n    fetch('https://tronai.io/v1/g_chat', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      }),\n      credentials: 'include'\n    }).then(response => {\n      if (!response.ok) throw new Error('Network response was not ok');\n      return response.json();\n    }).then(data => {\n      hideThinkingAnimation();\n      typeOutMessage(data.data.answer, 'bot');\n    }).catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n      hideThinkingAnimation();\n      typeOutMessage('Sorry, something went wrong. Please try again.', 'bot');\n    }).finally(() => {\n      setIsSending(false);\n    });\n  };\n  const typeOutMessage = (text, sender) => {\n    const messageBox = {\n      sender,\n      text: ''\n    };\n    setMessages(prevMessages => [...prevMessages, messageBox]);\n    let index = 0;\n    const typingInterval = setInterval(() => {\n      if (index < text.length) {\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          updatedMessages[updatedMessages.length - 1].text = text.substring(0, index + 1);\n          return updatedMessages;\n        });\n        index++;\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n      } else {\n        clearInterval(typingInterval);\n        const timestamp = getCurrentTime();\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          updatedMessages[updatedMessages.length - 1].timestamp = timestamp;\n          return updatedMessages;\n        });\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n      }\n    }, 15);\n  };\n  const appendMessage = (sender, text) => {\n    setMessages(prevMessages => [...prevMessages, {\n      sender,\n      text\n    }]);\n  };\n  const showThinkingAnimation = () => {\n    const thinkingMessage = {\n      sender: 'bot',\n      text: /*#__PURE__*/_jsxDEV(ThinkingAnimation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 56\n      }, this)\n    };\n    setMessages(prevMessages => [...prevMessages, thinkingMessage]);\n  };\n  const hideThinkingAnimation = () => {\n    setMessages(prevMessages => prevMessages.filter(msg => !(msg.text.type && msg.text.type === ThinkingAnimation)));\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !enterKeyDisabledRef.current) {\n      handleSendMessage();\n    }\n  };\n  const handleClose = () => {\n    setIsSliding(true);\n    setTimeout(() => setIsVisible(false), 300); // Match with CSS transition duration\n  };\n  return isVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot-container ${isSliding ? 'slide-out' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      id: \"chatContainer\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: [msg.sender === 'user' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-box\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: \"Assistant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-box\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timestamp\",\n          children: msg.timestamp || getCurrentTime()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"userInput\",\n        value: userInput,\n        placeholder: \"Type your message...\",\n        onChange: handleInputChange,\n        onKeyPress: handleKeyPress,\n        disabled: isSending\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        id: \"sendButton\",\n        onClick: handleSendMessage,\n        disabled: isSending,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: handleClose,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 13\n  }, this);\n};\n_s(Chatbot, \"cK+u3smlA39g59q6XxAM5W7iGU4=\");\n_c2 = Chatbot;\nconst getCurrentTime = () => {\n  const now = new Date();\n  return now.toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport default Chatbot;\nvar _c, _c2;\n$RefreshReg$(_c, \"ThinkingAnimation\");\n$RefreshReg$(_c2, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","ThinkingAnimation","className","children","Array","from","length","_","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","Chatbot","_s","messages","setMessages","sender","text","userInput","setUserInput","isSending","setIsSending","isVisible","setIsVisible","isSliding","setIsSliding","chatContainerRef","enterKeyDisabledRef","current","scrollTop","scrollHeight","handleInputChange","e","target","value","handleSendMessage","trimmedMessage","trim","appendMessage","setTimeout","fetchResponse","query","showThinkingAnimation","fetch","method","headers","body","JSON","stringify","credentials","then","response","ok","Error","json","data","hideThinkingAnimation","typeOutMessage","answer","catch","error","console","finally","messageBox","prevMessages","typingInterval","setInterval","updatedMessages","substring","clearInterval","timestamp","getCurrentTime","thinkingMessage","filter","msg","type","handleKeyPress","key","handleClose","ref","id","map","placeholder","onChange","onKeyPress","disabled","onClick","_c2","now","Date","toLocaleTimeString","hour","minute","$RefreshReg$"],"sources":["/Users/ngaigarricktrondao/Desktop/Tron-Net/TronAI-React/src/components/Agent/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\n\nconst ThinkingAnimation = () => {\n    return (\n        <div className=\"loader\">\n            {Array.from({ length: 5 }, (_, index) => (\n                <div key={index} className=\"dot\"></div>\n            ))}\n        </div>\n    );\n};\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([{ sender: 'bot', text: 'Dear Tron user, how can I help?' }]);\n    const [userInput, setUserInput] = useState('');\n    const [isSending, setIsSending] = useState(false);\n    const [isVisible, setIsVisible] = useState(true);\n    const [isSliding, setIsSliding] = useState(false);\n    const chatContainerRef = useRef(null);\n    const enterKeyDisabledRef = useRef(false);\n\n    useEffect(() => {\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }, [messages]);\n\n    const handleInputChange = (e) => {\n        setUserInput(e.target.value);\n    };\n\n    const handleSendMessage = () => {\n        const trimmedMessage = userInput.trim();\n        if (trimmedMessage === '') {\n            appendMessage('bot', 'Please enter a message so I can properly assist you.');\n            return;\n        }\n\n        appendMessage('user', trimmedMessage);\n        setUserInput('');\n        setIsSending(true);\n\n        enterKeyDisabledRef.current = true;\n        setTimeout(() => {\n            enterKeyDisabledRef.current = false;\n        }, 4000);\n\n        fetchResponse(trimmedMessage);\n    };\n\n    const fetchResponse = (query) => {\n        showThinkingAnimation();\n\n        fetch('https://tronai.io/v1/g_chat', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ query }),\n            credentials: 'include',\n        })\n        .then(response => {\n            if (!response.ok) throw new Error('Network response was not ok');\n            return response.json();\n        })\n        .then(data => {\n            hideThinkingAnimation();\n            typeOutMessage(data.data.answer, 'bot');\n        })\n        .catch(error => {\n            console.error('There was a problem with the fetch operation:', error);\n            hideThinkingAnimation();\n            typeOutMessage('Sorry, something went wrong. Please try again.', 'bot');\n        })\n        .finally(() => {\n            setIsSending(false);\n        });\n    };\n\n    const typeOutMessage = (text, sender) => {\n        const messageBox = { sender, text: '' };\n        setMessages(prevMessages => [...prevMessages, messageBox]);\n\n        let index = 0;\n        const typingInterval = setInterval(() => {\n            if (index < text.length) {\n                setMessages(prevMessages => {\n                    const updatedMessages = [...prevMessages];\n                    updatedMessages[updatedMessages.length - 1].text = text.substring(0, index + 1);\n                    return updatedMessages;\n                });\n                index++;\n                chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n            } else {\n                clearInterval(typingInterval);\n                const timestamp = getCurrentTime();\n                setMessages(prevMessages => {\n                    const updatedMessages = [...prevMessages];\n                    updatedMessages[updatedMessages.length - 1].timestamp = timestamp;\n                    return updatedMessages;\n                });\n                chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n            }\n        }, 15);\n    };\n\n    const appendMessage = (sender, text) => {\n        setMessages(prevMessages => [...prevMessages, { sender, text }]);\n    };\n\n    const showThinkingAnimation = () => {\n        const thinkingMessage = { sender: 'bot', text: <ThinkingAnimation /> };\n        setMessages(prevMessages => [...prevMessages, thinkingMessage]);\n    };\n\n    const hideThinkingAnimation = () => {\n        setMessages(prevMessages => prevMessages.filter(msg => !(msg.text.type && msg.text.type === ThinkingAnimation)));\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !enterKeyDisabledRef.current) {\n            handleSendMessage();\n        }\n    };\n\n    const handleClose = () => {\n        setIsSliding(true);\n        setTimeout(() => setIsVisible(false), 300); // Match with CSS transition duration\n    };\n\n    return (\n        isVisible && (\n            <div className={`chatbot-container ${isSliding ? 'slide-out' : ''}`}>\n                <div className=\"chat-container\" ref={chatContainerRef} id=\"chatContainer\">\n                    {messages.map((msg, index) => (\n                        <div key={index} className={`message ${msg.sender}`}>\n                            {msg.sender === 'user' ? (\n                                <div className=\"message-box\">{msg.text}</div>\n                            ) : (\n                                <>\n                                    <div className=\"title\">Assistant</div>\n                                    <div className=\"message-box\">{msg.text}</div>\n                                </>\n                            )}\n                            <div className=\"timestamp\">{msg.timestamp || getCurrentTime()}</div>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"input-container\">\n                    <input\n                        type=\"text\"\n                        id=\"userInput\"\n                        value={userInput}\n                        placeholder=\"Type your message...\"\n                        onChange={handleInputChange}\n                        onKeyPress={handleKeyPress}\n                        disabled={isSending}\n                    />\n                    <button className=\"send-button\" id=\"sendButton\" onClick={handleSendMessage} disabled={isSending}>\n                        Send\n                    </button>\n                    <button className=\"close-button\" onClick={handleClose}>X</button>\n                </div>\n            </div>\n        )\n    );\n};\n\nconst getCurrentTime = () => {\n    const now = new Date();\n    return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}