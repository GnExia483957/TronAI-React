{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./Chatbot.css';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const ThinkingAnimation=()=>{return/*#__PURE__*/_jsx(\"div\",{className:\"loader\",children:Array.from({length:5},(_,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"dot\"},index))});};const Chatbot=()=>{const[messages,setMessages]=useState([{sender:'bot',text:'Dear Tron user, how can I help?'}]);const[userInput,setUserInput]=useState('');const[isSending,setIsSending]=useState(false);const chatContainerRef=useRef(null);const enterKeyDisabledRef=useRef(false);useEffect(()=>{chatContainerRef.current.scrollTop=chatContainerRef.current.scrollHeight;},[messages]);const handleInputChange=e=>{setUserInput(e.target.value);};const handleSendMessage=()=>{const trimmedMessage=userInput.trim();if(trimmedMessage===''){appendMessage('bot','Please enter a message so I can properly assist you.');return;}appendMessage('user',trimmedMessage);setUserInput('');setIsSending(true);// Disable send button for 4 seconds\nenterKeyDisabledRef.current=true;setTimeout(()=>{enterKeyDisabledRef.current=false;},4000);fetchResponse(trimmedMessage);};const fetchResponse=query=>{showThinkingAnimation();fetch('https://tronai.io/v1/g_chat',{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({query}),credentials:'include'}).then(response=>{if(!response.ok)throw new Error('Network response was not ok');return response.json();}).then(data=>{hideThinkingAnimation();typeOutMessage(data.data.answer,'bot');}).catch(error=>{console.error('There was a problem with the fetch operation:',error);hideThinkingAnimation();typeOutMessage('Sorry, something went wrong. Please try again.','bot');}).finally(()=>{setIsSending(false);});};const typeOutMessage=(text,sender)=>{const messageBox={sender,text:''};// Initialize with empty text\nsetMessages(prevMessages=>[...prevMessages,messageBox]);let index=0;const typingInterval=setInterval(()=>{if(index<text.length){setMessages(prevMessages=>{const updatedMessages=[...prevMessages];updatedMessages[updatedMessages.length-1].text=text.substring(0,index+1);// Update text progressively\nreturn updatedMessages;});index++;chatContainerRef.current.scrollTop=chatContainerRef.current.scrollHeight;// Keep scrolling to the bottom\n}else{clearInterval(typingInterval);// Stop typing effect\nconst timestamp=getCurrentTime();// Set timestamp after typing\nsetMessages(prevMessages=>{const updatedMessages=[...prevMessages];updatedMessages[updatedMessages.length-1].timestamp=timestamp;// Add timestamp\nreturn updatedMessages;});chatContainerRef.current.scrollTop=chatContainerRef.current.scrollHeight;// Final scroll to the bottom\n}},15);// Adjust typing speed here\n};const appendMessage=(sender,text)=>{setMessages(prevMessages=>[...prevMessages,{sender,text}]);};const showThinkingAnimation=()=>{const thinkingMessage={sender:'bot',text:/*#__PURE__*/_jsx(ThinkingAnimation,{})};setMessages(prevMessages=>[...prevMessages,thinkingMessage]);};const hideThinkingAnimation=()=>{setMessages(prevMessages=>prevMessages.filter(msg=>!(msg.text.type&&msg.text.type===ThinkingAnimation)));};const handleKeyPress=e=>{if(e.key==='Enter'&&!enterKeyDisabledRef.current){handleSendMessage();}};// const handleClose = () => {\n//     // Logic to handle closing the chat (e.g., hiding the component)\n// };\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-container\",ref:chatContainerRef,id:\"chatContainer\",children:messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${msg.sender}`,children:[msg.sender==='user'?/*#__PURE__*/_jsx(\"div\",{className:\"message-box\",children:msg.text}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"title\",children:\"Assistant\"}),/*#__PURE__*/_jsx(\"div\",{className:\"message-box\",children:msg.text})]}),/*#__PURE__*/_jsx(\"div\",{className:\"timestamp\",children:msg.timestamp||getCurrentTime()})]},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"userInput\",value:userInput,placeholder:\"Type your message...\",onChange:handleInputChange,onKeyPress:handleKeyPress,disabled:isSending}),/*#__PURE__*/_jsx(\"button\",{className:\"send-button\",id:\"sendButton\",onClick:handleSendMessage,disabled:isSending,children:\"Send\"})]})]});};const getCurrentTime=()=>{const now=new Date();return now.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});};export default Chatbot;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ThinkingAnimation","className","children","Array","from","length","_","index","Chatbot","messages","setMessages","sender","text","userInput","setUserInput","isSending","setIsSending","chatContainerRef","enterKeyDisabledRef","current","scrollTop","scrollHeight","handleInputChange","e","target","value","handleSendMessage","trimmedMessage","trim","appendMessage","setTimeout","fetchResponse","query","showThinkingAnimation","fetch","method","headers","body","JSON","stringify","credentials","then","response","ok","Error","json","data","hideThinkingAnimation","typeOutMessage","answer","catch","error","console","finally","messageBox","prevMessages","typingInterval","setInterval","updatedMessages","substring","clearInterval","timestamp","getCurrentTime","thinkingMessage","filter","msg","type","handleKeyPress","key","ref","id","map","placeholder","onChange","onKeyPress","disabled","onClick","now","Date","toLocaleTimeString","hour","minute"],"sources":["/Users/ngaigarricktrondao/Desktop/Tron-Net/TronAI-React/src/components/Agent/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\n\nconst ThinkingAnimation = () => {\n    return (\n        <div className=\"loader\">\n            {Array.from({ length: 5 }, (_, index) => (\n                <div key={index} className=\"dot\"></div>\n            ))}\n        </div>\n    );\n};\n\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([{ sender: 'bot', text: 'Dear Tron user, how can I help?' }]);\n    const [userInput, setUserInput] = useState('');\n    const [isSending, setIsSending] = useState(false);\n    const chatContainerRef = useRef(null);\n    const enterKeyDisabledRef = useRef(false);\n\n    useEffect(() => {\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }, [messages]);\n\n    const handleInputChange = (e) => {\n        setUserInput(e.target.value);\n    };\n\n    const handleSendMessage = () => {\n        const trimmedMessage = userInput.trim();\n        if (trimmedMessage === '') {\n            appendMessage('bot', 'Please enter a message so I can properly assist you.');\n            return;\n        }\n\n        appendMessage('user', trimmedMessage);\n        setUserInput('');\n        setIsSending(true);\n\n        // Disable send button for 4 seconds\n        enterKeyDisabledRef.current = true;\n        setTimeout(() => {\n            enterKeyDisabledRef.current = false;\n        }, 4000);\n\n        fetchResponse(trimmedMessage);\n    };\n\n    const fetchResponse = (query) => {\n        showThinkingAnimation();\n\n        fetch('https://tronai.io/v1/g_chat', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ query }),\n            credentials: 'include',\n        })\n        .then(response => {\n            if (!response.ok) throw new Error('Network response was not ok');\n            return response.json();\n        })\n        .then(data => {\n            hideThinkingAnimation();\n            typeOutMessage(data.data.answer, 'bot');\n        })\n        .catch(error => {\n            console.error('There was a problem with the fetch operation:', error);\n            hideThinkingAnimation();\n            typeOutMessage('Sorry, something went wrong. Please try again.', 'bot');\n        })\n        .finally(() => {\n            setIsSending(false);\n        });\n    };\n\n    const typeOutMessage = (text, sender) => {\n        const messageBox = { sender, text: '' }; // Initialize with empty text\n        setMessages(prevMessages => [...prevMessages, messageBox]);\n\n        let index = 0;\n        const typingInterval = setInterval(() => {\n            if (index < text.length) {\n                setMessages(prevMessages => {\n                    const updatedMessages = [...prevMessages];\n                    updatedMessages[updatedMessages.length - 1].text = text.substring(0, index + 1); // Update text progressively\n                    return updatedMessages;\n                });\n                index++;\n                chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Keep scrolling to the bottom\n            } else {\n                clearInterval(typingInterval); // Stop typing effect\n                const timestamp = getCurrentTime(); // Set timestamp after typing\n                setMessages(prevMessages => {\n                    const updatedMessages = [...prevMessages];\n                    updatedMessages[updatedMessages.length - 1].timestamp = timestamp; // Add timestamp\n                    return updatedMessages;\n                });\n                chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Final scroll to the bottom\n            }\n        }, 15); // Adjust typing speed here\n    };\n\n    const appendMessage = (sender, text) => {\n        setMessages(prevMessages => [...prevMessages, { sender, text }]);\n    };\n\n    const showThinkingAnimation = () => {\n        const thinkingMessage = { sender: 'bot', text: <ThinkingAnimation /> };\n        setMessages(prevMessages => [...prevMessages, thinkingMessage]);\n    };\n\n    const hideThinkingAnimation = () => {\n        setMessages(prevMessages => prevMessages.filter(msg => !(msg.text.type && msg.text.type === ThinkingAnimation)));\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !enterKeyDisabledRef.current) {\n            handleSendMessage();\n        }\n    };\n\n    // const handleClose = () => {\n    //     // Logic to handle closing the chat (e.g., hiding the component)\n    // };\n\n    return (\n        <div className=\"chatbot-container\">\n            <div className=\"chat-container\" ref={chatContainerRef} id=\"chatContainer\">\n                {messages.map((msg, index) => (\n                    <div key={index} className={`message ${msg.sender}`}>\n                        {msg.sender === 'user' ? (\n                            <div className=\"message-box\">{msg.text}</div>\n                        ) : (\n                            <>\n                                <div className=\"title\">Assistant</div>\n                                <div className=\"message-box\">{msg.text}</div>\n                            </>\n                        )}\n                        <div className=\"timestamp\">{msg.timestamp || getCurrentTime()}</div>\n                    </div>\n                ))}\n            </div>\n\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    id=\"userInput\"\n                    value={userInput}\n                    placeholder=\"Type your message...\"\n                    onChange={handleInputChange}\n                    onKeyPress={handleKeyPress}\n                    disabled={isSending}\n                />\n                <button className=\"send-button\" id=\"sendButton\" onClick={handleSendMessage} disabled={isSending}>\n                    Send\n                </button>\n            </div>\n        </div>\n    );\n};\n\nconst getCurrentTime = () => {\n    const now = new Date();\n    return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}