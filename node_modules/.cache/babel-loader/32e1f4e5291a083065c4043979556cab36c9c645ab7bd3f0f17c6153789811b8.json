{"ast":null,"code":"var _jsxFileName = \"/Users/ngaigarricktrondao/Desktop/Tron-Net/TronAI-React/src/components/Agent/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ThinkingAnimation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader\",\n    children: Array.from({\n      length: 5\n    }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n_c = ThinkingAnimation;\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: 'Dear Tron user, how can I help?'\n  }]);\n  const [userInput, setUserInput] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const chatContainerRef = useRef(null);\n  const enterKeyDisabledRef = useRef(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const openModal = () => setIsOpen(true);\n  const closeModal = () => setIsOpen(false);\n  useEffect(() => {\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }, [messages]);\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSendMessage = () => {\n    const trimmedMessage = userInput.trim();\n    if (trimmedMessage === '') {\n      appendMessage('bot', 'Please enter a message so I can properly assist you.');\n      return;\n    }\n    appendMessage('user', trimmedMessage);\n    setUserInput('');\n    setIsSending(true);\n\n    // Disable send button for 4 seconds\n    enterKeyDisabledRef.current = true;\n    setTimeout(() => {\n      enterKeyDisabledRef.current = false;\n    }, 4000);\n    fetchResponse(trimmedMessage);\n  };\n  const fetchResponse = query => {\n    showThinkingAnimation();\n    fetch('https://tronai.io/v1/g_chat', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      }),\n      credentials: 'include'\n    }).then(response => {\n      if (!response.ok) throw new Error('Network response was not ok');\n      return response.json();\n    }).then(data => {\n      hideThinkingAnimation();\n      typeOutMessage(data.data.answer, 'bot');\n    }).catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n      hideThinkingAnimation();\n      typeOutMessage('Sorry, something went wrong. Please try again.', 'bot');\n    }).finally(() => {\n      setIsSending(false);\n    });\n  };\n  const typeOutMessage = (text, sender) => {\n    const messageBox = {\n      sender,\n      text: ''\n    }; // Initialize with empty text\n    setMessages(prevMessages => [...prevMessages, messageBox]);\n    let index = 0;\n    const typingInterval = setInterval(() => {\n      if (index < text.length) {\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          updatedMessages[updatedMessages.length - 1].text = text.substring(0, index + 1); // Update text progressively\n          return updatedMessages;\n        });\n        index++;\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Keep scrolling to the bottom\n      } else {\n        clearInterval(typingInterval); // Stop typing effect\n        const timestamp = getCurrentTime(); // Set timestamp after typing\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          updatedMessages[updatedMessages.length - 1].timestamp = timestamp; // Add timestamp\n          return updatedMessages;\n        });\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Final scroll to the bottom\n      }\n    }, 15); // Adjust typing speed here\n  };\n  const appendMessage = (sender, text) => {\n    setMessages(prevMessages => [...prevMessages, {\n      sender,\n      text\n    }]);\n  };\n  const showThinkingAnimation = () => {\n    const thinkingMessage = {\n      sender: 'bot',\n      text: /*#__PURE__*/_jsxDEV(ThinkingAnimation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 56\n      }, this)\n    };\n    setMessages(prevMessages => [...prevMessages, thinkingMessage]);\n  };\n  const hideThinkingAnimation = () => {\n    setMessages(prevMessages => prevMessages.filter(msg => !(msg.text.type && msg.text.type === ThinkingAnimation)));\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !enterKeyDisabledRef.current) {\n      handleSendMessage();\n    }\n  };\n\n  // const handleClose = () => {\n  //     // Logic to handle closing the chat (e.g., hiding the component)\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `modal ${isOpen ? 'open' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"close-button\",\n          id: \"closeModal\",\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-container\",\n          ref: chatContainerRef,\n          id: \"chatContainer\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender}`,\n            children: [msg.sender === 'user' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-box\",\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"title\",\n                children: \"Assistant\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-box\",\n                children: msg.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timestamp\",\n              children: msg.timestamp || getCurrentTime()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 25\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"userInput\",\n            value: userInput,\n            placeholder: \"Type your message...\",\n            onChange: handleInputChange,\n            onKeyPress: handleKeyPress,\n            disabled: isSending\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"send-button\",\n            id: \"sendButton\",\n            onClick: handleSendMessage,\n            disabled: isSending,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"VUmejDRYh4cOCapzov3llIVXsrk=\");\n_c2 = Chatbot;\nconst getCurrentTime = () => {\n  const now = new Date();\n  return now.toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport default Chatbot;\nvar _c, _c2;\n$RefreshReg$(_c, \"ThinkingAnimation\");\n$RefreshReg$(_c2, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","ThinkingAnimation","className","children","Array","from","length","_","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","Chatbot","_s","messages","setMessages","sender","text","userInput","setUserInput","isSending","setIsSending","chatContainerRef","enterKeyDisabledRef","isOpen","setIsOpen","openModal","closeModal","current","scrollTop","scrollHeight","handleInputChange","e","target","value","handleSendMessage","trimmedMessage","trim","appendMessage","setTimeout","fetchResponse","query","showThinkingAnimation","fetch","method","headers","body","JSON","stringify","credentials","then","response","ok","Error","json","data","hideThinkingAnimation","typeOutMessage","answer","catch","error","console","finally","messageBox","prevMessages","typingInterval","setInterval","updatedMessages","substring","clearInterval","timestamp","getCurrentTime","thinkingMessage","filter","msg","type","handleKeyPress","key","onClick","onClose","class","id","ref","map","placeholder","onChange","onKeyPress","disabled","_c2","now","Date","toLocaleTimeString","hour","minute","$RefreshReg$"],"sources":["/Users/ngaigarricktrondao/Desktop/Tron-Net/TronAI-React/src/components/Agent/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\n\nconst ThinkingAnimation = () => {\n    return (\n        <div className=\"loader\">\n            {Array.from({ length: 5 }, (_, index) => (\n                <div key={index} className=\"dot\"></div>\n            ))}\n        </div>\n    );\n};\n\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([{ sender: 'bot', text: 'Dear Tron user, how can I help?' }]);\n    const [userInput, setUserInput] = useState('');\n    const [isSending, setIsSending] = useState(false);\n    const chatContainerRef = useRef(null);\n    const enterKeyDisabledRef = useRef(false);\n\n\n    const [isOpen, setIsOpen] = useState(false);\n\n    const openModal = () => setIsOpen(true);\n    const closeModal = () => setIsOpen(false);\n\n\n\n    useEffect(() => {\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }, [messages]);\n\n    const handleInputChange = (e) => {\n        setUserInput(e.target.value);\n    };\n\n    const handleSendMessage = () => {\n        const trimmedMessage = userInput.trim();\n        if (trimmedMessage === '') {\n            appendMessage('bot', 'Please enter a message so I can properly assist you.');\n            return;\n        }\n\n        appendMessage('user', trimmedMessage);\n        setUserInput('');\n        setIsSending(true);\n\n        // Disable send button for 4 seconds\n        enterKeyDisabledRef.current = true;\n        setTimeout(() => {\n            enterKeyDisabledRef.current = false;\n        }, 4000);\n\n        fetchResponse(trimmedMessage);\n    };\n\n    const fetchResponse = (query) => {\n        showThinkingAnimation();\n\n        fetch('https://tronai.io/v1/g_chat', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ query }),\n            credentials: 'include',\n        })\n        .then(response => {\n            if (!response.ok) throw new Error('Network response was not ok');\n            return response.json();\n        })\n        .then(data => {\n            hideThinkingAnimation();\n            typeOutMessage(data.data.answer, 'bot');\n        })\n        .catch(error => {\n            console.error('There was a problem with the fetch operation:', error);\n            hideThinkingAnimation();\n            typeOutMessage('Sorry, something went wrong. Please try again.', 'bot');\n        })\n        .finally(() => {\n            setIsSending(false);\n        });\n    };\n\n    const typeOutMessage = (text, sender) => {\n        const messageBox = { sender, text: '' }; // Initialize with empty text\n        setMessages(prevMessages => [...prevMessages, messageBox]);\n\n        let index = 0;\n        const typingInterval = setInterval(() => {\n            if (index < text.length) {\n                setMessages(prevMessages => {\n                    const updatedMessages = [...prevMessages];\n                    updatedMessages[updatedMessages.length - 1].text = text.substring(0, index + 1); // Update text progressively\n                    return updatedMessages;\n                });\n                index++;\n                chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Keep scrolling to the bottom\n            } else {\n                clearInterval(typingInterval); // Stop typing effect\n                const timestamp = getCurrentTime(); // Set timestamp after typing\n                setMessages(prevMessages => {\n                    const updatedMessages = [...prevMessages];\n                    updatedMessages[updatedMessages.length - 1].timestamp = timestamp; // Add timestamp\n                    return updatedMessages;\n                });\n                chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight; // Final scroll to the bottom\n            }\n        }, 15); // Adjust typing speed here\n    };\n\n    const appendMessage = (sender, text) => {\n        setMessages(prevMessages => [...prevMessages, { sender, text }]);\n    };\n\n    const showThinkingAnimation = () => {\n        const thinkingMessage = { sender: 'bot', text: <ThinkingAnimation /> };\n        setMessages(prevMessages => [...prevMessages, thinkingMessage]);\n    };\n\n    const hideThinkingAnimation = () => {\n        setMessages(prevMessages => prevMessages.filter(msg => !(msg.text.type && msg.text.type === ThinkingAnimation)));\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !enterKeyDisabledRef.current) {\n            handleSendMessage();\n        }\n    };\n\n    // const handleClose = () => {\n    //     // Logic to handle closing the chat (e.g., hiding the component)\n    // };\n\n    return (\n\n        <div className={`modal ${isOpen ? 'open' : ''}`}>\n        <div className=\"modal-content\">\n          <span className=\"close\" onClick={onClose}>&times;</span>\n\n\n\n\n\n\n        <div className=\"chatbot-container\">\n            <button class=\"close-button\" id=\"closeModal\">X</button>\n            <div className=\"chat-container\" ref={chatContainerRef} id=\"chatContainer\">\n                {messages.map((msg, index) => (\n                    <div key={index} className={`message ${msg.sender}`}>\n                        {msg.sender === 'user' ? (\n                            <div className=\"message-box\">{msg.text}</div>\n                        ) : (\n                            <>\n                                <div className=\"title\">Assistant</div>\n                                <div className=\"message-box\">{msg.text}</div>\n                            </>\n                        )}\n                        <div className=\"timestamp\">{msg.timestamp || getCurrentTime()}</div>\n                    </div>\n                ))}\n            </div>\n\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    id=\"userInput\"\n                    value={userInput}\n                    placeholder=\"Type your message...\"\n                    onChange={handleInputChange}\n                    onKeyPress={handleKeyPress}\n                    disabled={isSending}\n                />\n                <button className=\"send-button\" id=\"sendButton\" onClick={handleSendMessage} disabled={isSending}>\n                    Send\n                </button>\n            </div>\n        </div>\n\n\n        </div>\n        </div>\n    );\n};\n\nconst getCurrentTime = () => {\n    const now = new Date();\n    return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}